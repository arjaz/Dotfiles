#+STARTUP: showeverything

* Startup optimization
I'm not really sure how to improve that, but I don't care since switching to emacs-daemon
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 268435456 ; 256mb
                    gc-cons-percentage 0.1)))
#+END_SRC
* QoL features
Here I disable some useless stuff like menu-bar, scroll-bar, etc, make some aliases and small adjustments.
#+BEGIN_SRC emacs-lisp
  ;; Disable startup message and gtk pop-ups
  (setq inhibit-startup-message t
        x-gtk-use-system-tooltips nil
        use-dialog-box nil)
  ;; Disable menu-bar
  (menu-bar-mode -1)
  ;; Disable scroll-bar
  (scroll-bar-mode -1)
  ;; Disable tool-bar
  (tool-bar-mode -1)
  ;; Disable tooltip
  (tooltip-mode -1)

  ;; Symlinks
  (setq vc-follow-symlinks t)
  (setq find-file-visit-truename t)

  ;; Don't create backup files
  (setq make-backup-files nil)
  (setq backup-directory-alist '(("." . "~/.config/emacs/saves")))

  ;; Automaticalyy revert changes
  (global-auto-revert-mode t)

  ;; That's for tramp
  (setq tramp-default-method "ssh")

  ;; Disable auto-saves
  (setq auto-save-default nil)

  ;; We don't want to type yes and no all the time so, do y and n
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Faces
I'm not sure what font to use. I used to love FiraCode, but I don't really know anymore.
Now I think between Monoid and Input
#+Begin_src emacs-lisp
  (setq default-frame-alist '((font . "FiraCode-10")))
  (set-frame-font "FiraCode-10")
  (set-face-attribute 'default nil :height 100 :weight 'normal)
#+END_SRC
* Useful modes and hooks
#+BEGIN_SRC emacs-lisp
  ;; Remove trailing whitespaces
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Folding
  (add-hook 'prog-mode-hook 'hs-minor-mode)

  ;; Non-blinking cursor
  (blink-cursor-mode 0)

  ;; Highlight matching brace
  (show-paren-mode t)

  ;; Highlight current line
  (global-hl-line-mode t)

  ;; Relative line numbers
  (global-display-line-numbers-mode t)

  (electric-pair-mode t)
#+END_SRC
** Flymake
#+BEGIN_SRC emacs-lisp
  ;; Move flymake garbage
  (setq flymake-run-in-place nil)
  (setq temporary-file-directory "~/.config/emacs/tmp/")
#+END_SRC
* Misc
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4)
  (setq c-default-style "k&r"
        c-basic-offset 4)
  (setq js-indent-level 2)
#+END_SRC
** Other stuff
#+BEGIN_SRC emacs-lisp
  ;; Clean buffers
  (setq clean-buffer-list-delay-general 1)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (require 'ibuf-ext)
  (add-to-list 'ibuffer-never-show-predicates "^\\*")

  ;; Zathura for pdf
  (setq TeX-view-program-list '(("zathura" "zathura --page=%(outpage) %o")))
  (setq TeX-view-program-selection '((output-pdf "Zathura")))

  ;; Relative line numbers
  (setq display-line-numbers-type 'relative)

  ;; Smooth scrolling
  (setq scroll-conservatively 101) ;; move minimum when cursor exits view, instead of recentering

  (global-set-key (kbd "<f5>") 'recompile)
#+END_SRC
* Packages
I generally use use-package
** init
#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))

  (setq package-enable-at-startup nil)
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
*** Visual stuff
I'm not sure about solaire
**** Solaire
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :hook (after-init . solaire-global-mode))
#+END_SRC
**** Tree-sitter
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("ublt" . "https://elpa.ubolonton.org/packages/"))

  (use-package tree-sitter
    :config
    (global-tree-sitter-mode)
    :hook (tree-sitter-after-on . tree-sitter-hl-mode))

  (use-package tree-sitter-langs)
#+END_SRC
**** Ligatures
#+BEGIN_SRC emacs-lisp
  (use-package fira-code-mode
    :custom (fira-code-mode-disabled-ligatures '("[]" "x"))
    :config
    (setq fira-code-mode-enable-hex-literal nil)
    (global-fira-code-mode))
#+END_SRC
**** Doom-themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :after (solaire-mode)
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-nord t)
    (doom-themes-org-config))
#+END_SRC
**** Doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :hook (doom-modeline-mode . column-number-mode)
    :init
    (setq doom-modeline-icon t
          doom-modeline-project-detection 'project
          doom-modeline-modal-icon t
          doom-modeline-major-mode-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-buffer-state-icon t
          doom-modeline-buffer-modification-icon t
          doom-modeline-env-version t
          doom-modeline-lsp t))
#+END_SRC
**** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
**** Highlight-indent-guides
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-responsive 'stack))
#+END_SRC
**** All-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)

  (use-package all-the-icons-dired
   :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
**** Hl-todo
#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :config
    (global-hl-todo-mode t)
    (setq hl-todo-keyword-faces
          `(;; For things that need to be done, just not today.
            ("TODO" warning bold)
            ;; For problems that will become bigger problems later if not
            ;; fixed ASAP.
            ("FIXME" error bold)
            ;; For tidbits that are unconventional and not intended uses of the
            ;; constituent parts, and may break in a future update.
            ("HACK" font-lock-constant-face bold)
            ;; For things that were done hastily and/or hasn't been thoroughly
            ;; tested. It may not even be necessary!
            ("REVIEW" font-lock-keyword-face bold)
            ;; For especially important gotchas with a given implementation,
            ;; directed at another user other than the author.
            ("NOTE" success bold)
            ;; For things that just gotta go and will soon be gone.
            ("DEPRECATED" font-lock-doc-face bold)
            ;; For a known bug that needs a workaround
            ("BUG" error bold)
            ;; For warning about a problematic or misguiding code
            ("XXX" font-lock-constant-face bold))))
#+END_SRC
**** Git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode t)
    (setq git-gutter:window-width 2
          git-gutter:update-interval 1
          git-gutter:ask-p nil))

  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :after git-gutter
    :demand fringe-helper
    :config
    ;; subtle diff indicators in the fringe
    ;; places the git gutter outside the margins.
    (setq-default fringes-outside-margins t)
    ;; thin fringe bitmaps
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248]
      nil nil 'center))
#+END_SRC
*** Ws-butler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :config
    (ws-butler-global-mode t))
#+END_SRC
*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-startup-banner 3)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC
*** Smart-tabs
I've fallen into the heresy.
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :hook (c-mode . (lambda ()
                      (setq intent-tabs-mode t)))
    :hook (c++-mode . (lambda ()
                      (setq intent-tabs-mode t)))
    :config
    (smart-tabs-insinuate 'c 'c++ 'javascript))
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (setq smartparens-global-mode t)
    (require 'smartparens-config))
#+END_SRC
*** Eshell
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-regexp "^.* λ "
        eshell-prompt-function #'+eshell/prompt)


  (defun +eshell/prompt ()
    (let ((base/dir (shrink-path-prompt default-directory)))
          (concat (propertize (car base/dir)
                              'face 'font-lock-comment-face)
                  (propertize (cdr base/dir)
                              'face 'font-lock-constant-face)
                  (propertize (+eshell--current-git-branch)
                              'face 'font-lock-function-name-face)
                  (propertize " λ" 'face 'eshell-prompt-face)
                  ;; needed for the input text to not have prompt face
                  (propertize " " 'face 'default))))

  (defun +eshell--current-git-branch ()
      (let ((branch (car (cl-loop for match in (split-string (shell-command-to-string "git branch") "\n")
                               when (string-match "^\*" match)
                               collect match))))
        (if (not (eq branch nil))
            (concat " [" (substring branch 2) "]")
          "")))

  (defun eshell-clear-buffer ()
    "Clear terminal"
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
  (add-hook 'eshell-mode-hook
            '(lambda()
               (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

  (use-package eshell-toggle
    :custom
    (eshell-toggle-size-fraction 4))

  (use-package eshell-did-you-mean
    :config
    (eshell-did-you-mean-setup))

  (use-package esh-help
    :config
    (setup-esh-help-eldoc))

  (use-package shrink-path)

  (use-package bash-completion)
    ;; :config
    ;; (bash-completion-setup))

  (use-package fish-completion
    :config
    (global-fish-completion-mode)
    (setq fish-completion-fallback-on-bash-p t))
#+END_SRC
*** Mu4e
#+BEGIN_SRC emacs-lisp
  (require 'mu4e)

  ;; default
  (setq mu4e-maildir "~/Maildir")
  (setq mu4e-drafts-folder "/[Gmail].Drafts")
  (setq mu4e-sent-folder "/[Gmail].Sent Mail")
  (setq mu4e-trash-folder "/[Gmail].Trash")

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  ;; allow for updating mail in the main view:
  (setq mu4e-get-mail-command "offlineimap")

  ;; something about ourselves
  (setq user-mail-address "art6661322@gmail.com"
        user-full-name  "Eugene Rossokha")

  (setq mu4e-view-show-images t
        mu4e-view-image-max-width 800)

  ;; (require 'smptpmail)

  ;; (setq message-send-mail-function 'smtpmail-send-it
  ;;       smtpmail-stream-type 'starttls
  ;;       smtpmail-default-smtp-server "smtp.gmail.com"
  ;;       smtpmail-smtp-server "smtp.gmail.com"
  ;;       smtpmail-smtp-service 587)

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
#+END_SRC
*** Elfeed
#+BEGIN_SRC emacs-lisp
  (defun elfeed-v-mpv (url)
    "Watch a video from URL in MPV"
    (start-process "mpv" nil "mpv" url))

  (defun elfeed-view-mpv (&optional use-generic-p)
    "YouTube-feed link"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               do (elfeed-untag entry 'unread)
               when (elfeed-entry-link entry)
               do (elfeed-v-mpv it))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (use-package elfeed
    :bind ("C-c C-v" . elfeed-view-mpv)
    :config
    (setq elfeed-feeds
          '("https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA"
            "https://www.youtube.com/feeds/videos.xml?channel_id=UCZAENaOaceQUMd84GDc26EA"
            "https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg"
            "https://lukesmith.xyz/rss.xml"
            "https://videos.lukesmith.xyz/feeds/videos.xml?videoChannelId=2"
            "https://bay12games.com/dwarves/b12_call.rss")))
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)

  (use-package magit-todos
    :hook (prog-mode . magit-todos-mode))
#+END_SRC
*** TODO Forge
*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode t))
#+END_SRC
*** Ivy, Swiper and Counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind (("C-x C-f" . counsel-find-file)
           ("M-x" . counsel-M-x)
           :map ivy-mode-map
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line))
    :after (evil)
    :config
    ;; (defalias 'evil-search-forward 'swiper-isearch)
    (ivy-mode t)
    (counsel-mode t)
    (setq projectile-completion-system 'ivy
          ivy-magic-slash-non-match-action nil
          ivy-use-virtual-buffers nil
          ivy-virtual-abbreviate 'full
          ivy-display-style 'fancy
          ivy-on-del-error-function #'ignore
          ivy-format-function 'ivy-format-function-line
          ivy-sort-max-size 7500))

  (use-package ivy-hydra)
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :config
    ;; enable python for in-buffer evaluation
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))

    ;; all python code be safe
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (string= lang "python")))
    (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

    (setq org-directory "~/.org/")
    (setq org-default-notes-file (concat org-directory "notes.org"))
    (setq org-hide-leading-stars t)
    (setq org-startup-folded t)
    (setq org-startup-indented t)
    (setq org-agenda-files (list org-default-notes-file)))

  ;; TODO: agenda, capture templates
  (setq org-capture-templates
        '(("t" "Tasks" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?\n%u\n" :prepend t)
          ("l" "Look later" entry (file+headline org-default-notes-file "Look later")
           "* TODO %?")
          ("s" "Skills" entry (file+headline org-default-notes-file "Skills")
           "* TODO %?")
          ("g" "Gifts" entry (file+headline org-default-notes-file "Gifts")
           "* TODO %?")
          ))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC
*** Iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit)
#+END_SRC
*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :hook (after-change-major-mode . (lambda () (modify-syntax-entry ?_ "w")))
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    :config
    (define-key evil-normal-state-map (kbd "C-u") (lambda()
                                                    (interactive)
                                                    (evil-scroll-up nil)))
    (define-key evil-normal-state-map (kbd "C-d") (lambda()
                                                    (interactive)
                                                    (evil-scroll-down nil)))
    (evil-mode t)
    (setq evil-split-window-below t
          evil-vsplit-window-right t))

  (use-package evil-numbers
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "C-c j") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c k") 'evil-numbers/dec-at-pt))

  (use-package evil-indent-plus)

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode t))

  (use-package evil-embrace
    :config
    (setq evil-embrace-show-help-p nil)
    (evil-embrace-enable-evil-surround-integration))

  (use-package evil-args
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

    ;; bind evil-forward/backward-args
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg)

    ;; bind evil-jump-out-args
    (define-key evil-normal-state-map "K" 'evil-jump-out-args))

  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode))

  (use-package evil-leader
    :after evil
    :config
    (setq evil-leader/in-all-states 1)
    ;; (global-unset-key "<SPC>")
    (evil-leader/set-leader "<SPC>")
    (global-evil-leader-mode)
    (evil-leader/set-key
      ; Windows
      "w h" 'evil-window-left
      "w j" 'evil-window-down
      "w k" 'evil-window-up
      "w l" 'evil-window-right
      "w o" 'delete-other-windows
      "v" 'evil-window-vsplit
      "h" 'evil-window-split
      "q" 'evil-quit

      ; Terminal
      "n t" 'terminal-here-launch
      "n f" 'elfeed
      "n m" 'mu4e

      ; Lsp
      "l l" 'lsp
      "l c" 'lsp-treemacs-call-hierarchy
      "l n" 'lsp-rename
      "l s" 'lsp-describe-thing-at-point
      "l f" 'lsp-format-buffer
      "l d" 'lsp-find-definition
      "l t" 'lsp-find-type-definition
      "l r" 'lsp-find-references
      "l i" 'lsp-find-implementation
      "l a" 'lsp-execute-code-action
      "l m" 'lsp-ui-imenu

      "x" 'counsel-M-x

      ; Magit bindings
      "m m" 'magit-status
      "m b" 'magit-blame

      ; Eshell
      "t" 'eshell-toggle
      "e" 'eshell

      ; Search
      "s" 'swiper-isearch
      "a" 'counsel-ag

      ; Moving
      "b" 'ivy-switch-buffer
      "o" 'counsel-find-file
      "<SPC>" 'counsel-projectile-find-file
      "j" 'counsel-file-jump
      "g" 'counsel-bookmark
      "p" 'counsel-projectile-switch-project
      "d" 'dired-sidebar-toggle-with-current-directory))

  (use-package evil-iedit-state
    :after (iedit evil)
    :config
    (defalias 'iedit-cleanup 'iedit-lib-cleanup))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))

  (use-package evil-goggles
    :hook (evil-mode . evil-goggles-mode)
    :config
    (setq evil-goggles-duration 0.025))

  (use-package evil-magit
    :after (evil magit)
    :config
    (setq evil-magit-want-vertical-movement t))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
*** Parinfer
#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :ensure t
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults        ; should be included.
               pretty-parens  ; different paren styles for different modes.
               evil           ; If you use Evil.
               smart-tab))    ; C-b & C-f jump positions and smart shift with tab & S-tab.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'hy-mode-hook #'parinfer-mode)
      (add-hook 'racket-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
*** Key-chord
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :config
    (key-chord-mode t)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+END_SRC
*** Dired
**** Settings
#+BEGIN_SRC emacs-lisp
(require 'dired)
(setq dired-listing-switches "-alh"
      dired-auto-revert-buffer t  ; don't prompt to revert; just do it
      dired-dwim-target t  ; suggest a target for moving/copying intelligently
      dired-hide-details-hide-symlink-targets nil
      ;; Always copy/delete recursively
      dired-recursive-copies 'always
      dired-recursive-deletes 'top)
#+END_SRC
**** Diredfl
#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :hook (dired-mode . diredfl-mode))
#+END_SRC
**** Dired-hacks
#+BEGIN_SRC emacs-lisp
  (use-package dired-hacks-utils)
  (use-package dired-narrow
    :bind ((:map dired-mode-map
                ("C-c C-/" . dired-narrow-fuzzy))))
#+END_SRC
**** Dired-sidebar
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :config
    (add-to-list 'dired-sidebar-display-alist '(side . right)))
#+END_SRC
*** Terminal-here
#+BEGIN_SRC emacs-lisp
  (use-package terminal-here
    :bind (("M-RET" . terminal-here-launch))
    :config
    (setq terminal-here-terminal-command (list "st" "--")))
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind (:map company-active-map
                ("<tab>" . company-select-next)
                ("<return>" . company-complete))
    :config
    (advice-add 'company-complete-common :before (lambda () (setq my-company-point (point))))
    (advice-add 'company-complete-common :after (lambda ()
                                                  (when (equal my-company-point (point))
                                                    (yas-expand))))


    (setq company-idle-delay 0
          company-show-numbers t
          company-minimum-prefix-length 2
          company-selection-wrap-around t
          company-tooltip-limit 14
          company-tooltip-align-annotations t
          company-global-modes '(not erc-mode message-mode help-mode gud-mode)
          company-require-match 'never
          ;; Buffer-local backends will be computed when loading a major mode, so
          ;; only specify a global default here.
          company-backends '(company-capf)

          company-auto-complete nil
          company-auto-complete-chars nil)
    (global-company-mode t))
#+END_SRC
*** TabNine
#+BEGIN_SRC emacs-lisp
  (use-package company-tabnine
    :config
    (add-to-list 'company-backends #'company-tabnine))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode t))

  (use-package yasnippet-snippets)
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode)
    :config
    (setq flycheck-indication-mode 'right-fringe)
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [16 48 112 240 112 48 16] nil nil 'center)
    :bind ("C-c C-e" . flycheck-next-error))

  (use-package flycheck-pos-tip
    :config
    (setq flycheck-pos-tip-timeout 0)
    (flycheck-pos-tip-mode))

  (use-package flycheck-haskell
    :hook (haskell-mode . flycheck-haskell-setup))

  ;; (use-package flycheck-clang-tidy
  ;;   :after flycheck
  ;;   :hook (flycheck-mode . flycheck-clang-tidy-setup))

  (use-package flycheck-kotlin)

  (use-package flycheck-rust
    :hook (flycheck-mode . flycheck-rust-setup))
#+END_SRC
*** TODO Dap
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :config
    (setq dap-mode t
          dap-ui-mode t)
    (require 'dap-python))
#+END_SRC
*** Dumb Jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq dumb-jump-default-project "~/code"))
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (python-mode . lsp)
    :hook (elm-mode . lsp)
    :hook (c++-mode . lsp)
    :config
    (add-to-list 'lsp-clients-clangd-args "--clang-tidy")
    (setq lsp-semantic-highlighting t)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-prefer-capf t)
    (setq lsp-idle-delay 0.750)
    :init
    (setq read-process-output-max (* 1024 1024)))

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-ui
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-sideline-show-diagnostics t
          lsp-ui-sideline-show-hover t))
#+END_SRC
*** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :bind ("C-c d" . docker))
#+END_SRC
*** Languages
**** C++
Open *.h as c++-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC
# ***** Irony
# #+BEGIN_SRC emacs-lisp
#         ;; (use-package irony
#         ;;   :hook (c++-mode . irony-mode)
#         ;;   :hook (c-mode . irony-mode)
#         ;;   :hook (irony-mode . irony-cdb-autosetup-compile-options))

#         ;; (use-package company-irony
#         ;;   :after irony-mode
#         ;;   :after company
#         ;;   :config
#         ;;   (add-to-list 'company-backends 'company-irony))

#         ;; (use-package flycheck-irony
#         ;;   :after irony-mode
#         ;;   :after flycheck
#         ;;   :hook (flycheck-mode . flycheck-irony-setup))
# #+END_SRC
**** Haskell
***** Ormolu
#+BEGIN_SRC emacs-lisp
  ;; (use-package ormolu
  ;;   :hook (haskell-mode . ormolu-format-on-save-mode))
#+END_SRC
***** Hindent
#+BEGIN_SRC emacs-lisp
  (use-package hindent
    :init
    (setq hindent-reformat-buffer-on-save t))
#+END_SRC
***** Haskell-mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :hook (haskell-mode . haskell-indentation-mode)
    :hook (haskell-mode . interactive-haskell-mode)
    :hook (haskell-mode . hindent-mode)
    ;; :hook (haskell-mode . haskell-decl-scan-mode)
    ;; :hook (haskell-mode . haskell-doc-mode)
    :bind (:map haskell-mode-map ("C-c C-c" . haskell-process-load-file))
    :config
    (flymake-mode 0)
    (setq haskell-compile-cabal-build-command "stack build"))
#+END_SRC
***** Shakespeare-mode
#+BEGIN_SRC emacs-lisp
  (use-package shakespeare-mode)
#+END_SRC
***** Hlint-refactor
#+BEGIN_SRC emacs-lisp
  (use-package hlint-refactor
    :hook (haskell-mode . hlint-refactor-mode))
#+END_SRC
***** Lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-haskell
    :config
    (setq lsp-haskell-process-path-hie "haskell-language-server-wrapper"))
#+END_SRC
**** Python
***** Python-X
#+BEGIN_SRC emacs-lisp
  (use-package python-x
    :config
    (python-x-setup))
#+END_SRC
***** TODO Jedi
#+BEGIN_SRC emacs-lisp
  ;; (use-package company-jedi
  ;;   :hook (python-mode . (lambda () (add-to-list 'company-backends 'company-jedi))))
#+END_SRC
***** Cython
#+BEGIN_SRC emacs-lisp
  (use-package cython-mode)
#+END_SRC
***** TODO Elpy
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :init
  ;;   (elpy-enable)
  ;;   (setq elpy-rpc-backend "jedi")
  ;;   :config
  ;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))
#+END_SRC
***** Yapfify
#+BEGIN_SRC emacs-lisp
  (use-package yapfify
    :hook (python-mode . yapf-mode))
#+END_SRC
***** Venv
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv)

  (use-package auto-virtualenv
    :hook (python-mode . auto-virtualenv-set-virtualenv))
#+END_SRC
**** JavaScript
***** Rjsx-mode
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :mode "\\.jsx?$")
#+END_SRC
***** Prettier-js
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :hook (js-mode . prettier-js-mode)
    :hook (rjsx-mode . prettier-js-mode))
#+END_SRC
***** TODO Tide
**** TypeScript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode)
#+END_SRC
**** PureScript
#+BEGIN_SRC emacs-lisp
  (use-package purescript-mode
    :hook (purescript-mode . purescript-indentation-mode))
#+END_SRC
**** Hy
#+BEGIN_SRC emacs-lisp
  (use-package hy-mode)
#+END_SRC
**** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode)

  (use-package clojure-mode-extra-font-locking)

  (use-package cider)
#+END_SRC
**** Racket
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode)
#+END_SRC
**** Elm
#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :after company
    :hook (elm-mode . elm-format-on-save-mode))
    ;; (add-to-list 'company-backends 'company-elm))

  (use-package flycheck-elm
    :after (flycheck)
    :hook (flycheck-mode . flycheck-elm-setup))
#+END_SRC
**** Scala
#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode))
#+END_SRC
**** Kotlin
#+BEGIN_SRC emacs-lisp
  (use-package kotlin-mode)
#+END_SRC
**** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :bind (:map rust-mode-map
                ("C-c C-p" . rust-run-clippy)
                ("C-c C-c" . rust-run))
    :config
    (setq rust-format-on-save t))

  (use-package flycheck-rust
    :after flycheck
    :after rust-mode
    :hook (flycheck-mode . flycheck-rust-setup))
#+END_SRC
**** C#
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode)
#+END_SRC
**** Makefile
#+BEGIN_SRC emacs-lisp
  (use-package makefile-executor
    :hook (makefile-mode . makefile-executor-mode))
#+END_SRC
**** Cmake
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)

  (use-package cmake-font-lock)
#+END_SRC
**** Jinja2
#+BEGIN_SRC emacs-lisp
  (use-package jinja2-mode)
#+END_SRC
**** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC
**** Mermaid
#+BEGIN_SRC emacs-lisp
  (use-package mermaid-mode)
#+END_SRC
**** PlantUML
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :config
    (add-to-list
     'org-src-lang-modes '("plantuml" . plantuml))
    (setq plantuml-executable-path "/bin/plantuml")
    (setq plantuml-default-exec-mode 'executable))
#+END_SRC
**** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
**** BNF
#+BEGIN_SRC emacs-lisp
  (use-package bnf-mode)
#+END_SRC
**** Dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
**** HTML
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :hook (jinja2-mode . emmet-mode))
#+END_SRC
**** LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :bind ("M-q" . align-current)
    :hook (LaTeX-mode . LaTeX-math-mode)
    :hook (LaTeX-mode . flyspell-mode)
    :hook (LaTeX-mode . turn-on-reftex)
    :config
    (flycheck-mode 0)
    (setq TeX-PDF-mode t)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq reftex-plug-into-AUCTeX t))
#+END_SRC
**** Ledger
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode)
#+END_SRC
*** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
*** Auto-package-update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
*** Cross-packages
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after (ivy projectile)
    :config
    (counsel-projectile-mode t))

  (use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
