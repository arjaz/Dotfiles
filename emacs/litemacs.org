#+STARTUP: showeverything

 Startup optimization
I'm not really sure how to improve that, but I don't care since switching to emacs-daemon
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 268435456 ; 256mb
                    gc-cons-percentage 0.1)))
#+END_SRC
* QoL features
Here I disable some useless stuff like menu-bar, scroll-bar, etc, make some aliases and small adjustments.
#+BEGIN_SRC emacs-lisp
  ;; Disable startup message and gtk pop-ups
  (setq inhibit-startup-message t
        x-gtk-use-system-tooltips nil
        use-dialog-box nil)
  ;; Disable menu-bar
  (menu-bar-mode -1)
  ;; Disable scroll-bar
  (scroll-bar-mode -1)
  ;; Disable tool-bar
  (tool-bar-mode -1)
  ;; Disable tooltip
  (tooltip-mode -1)

  ;; Symlinks
  (setq vc-follow-symlinks t)
  (setq find-file-visit-truename t)

  ;; Don't create backup files
  (setq make-backup-files nil)

  ;; Disable auto-saves
  (setq auto-save-default nil)

  ;; We don't want to type yes and no all the time so, do y and n
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Faces
I'm not sure what font to use. I used to love FiraCode, but I don't really know anymore.
Now I think between Monoid and Input
#+Begin_src emacs-lisp
  (set-frame-font "FiraCode-10")
  (setq default-frame-alist '((font . "FiraCode-10")))
  ;; (set-face-attribute 'default nil :height 100 :weight 'normal)
#+END_SRC
* Useful modes and hooks
** Hooks
#+BEGIN_SRC emacs-lisp
  ;; Remove trailing whitespaces
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Folding
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC
** Modes provided by emacs
#+BEGIN_SRC emacs-lisp
  ;; Non-blinking cursor
  (blink-cursor-mode 0)

  ;; Highlight matching brace
  (show-paren-mode t)

  ;; Highlight current line
  (global-hl-line-mode t)

  ;; Relative line numbers
  (global-display-line-numbers-mode t)

  (electric-pair-mode t)
#+END_SRC
** Flymake
#+BEGIN_SRC emacs-lisp
  ;; Move flymake garbage
  (setq flymake-run-in-place nil)
  (setq temporary-file-directory "~/.config/emacs/tmp/")
#+END_SRC
* Misc
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4)
  (setq c-default-style "k&r"
        c-basic-offset 4)
  (setq js-indent-level 2)
#+END_SRC
** Other stuff
#+BEGIN_SRC emacs-lisp
  ;; Clean buffers
  (setq clean-buffer-list-delay-general 1)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (require 'ibuf-ext)
  (add-to-list 'ibuffer-never-show-predicates "^\\*")

  ;; Zathura for pdf
  (setq TeX-view-program-list '(("zathura" "zathura --page=%(outpage) %o")))
  (setq TeX-view-program-selection '((output-pdf "Zathura")))

  ;; Relative line numbers
  (setq display-line-numbers-type 'relative)

  ;; Smooth scrolling
  (setq scroll-conservatively 101) ;; move minimum when cursor exits view, instead of recentering

  ;; open *.h as c++-mode
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

  (global-set-key (kbd "<f5>") 'compile)
#+END_SRC
* Packages
I generally use use-package
** init
#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))

  (setq package-enable-at-startup nil)
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
*** Visual stuff
**** Doom-themes
#+BEGIN_SRC emacs-lisp
       (use-package doom-themes
         :config
         (setq doom-themes-enable-bold t
               doom-themes-enable-italic t)
         (load-theme 'doom-nord t)
         (doom-themes-org-config))
#+END_SRC
**** Doom-modeline
#+BEGIN_SRC emacs-lisp
       (use-package doom-modeline
         :hook (after-init . doom-modeline-mode)
         :init
         (setq doom-modeline-icon t)
         (setq doom-modeline-project-detection 'project)
         (setq doom-modeline-modal-icon t)
         (setq doom-modeline-major-mode-icon t)
         (setq doom-modeline-major-mode-color-icon t)
         (setq doom-modeline-buffer-state-icon t)
         (setq doom-modeline-buffer-modification-icon t)
         (setq doom-modeline-env-version t)
         (setq doom-modeline-lsp t))
#+END_SRC
**** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
         :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
**** Highlight-indent-guides
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-responsive 'stack))
#+END_SRC
**** All-the-icons
#+BEGIN_SRC emacs-lisp
       (use-package all-the-icons)

       (use-package all-the-icons-dired
        :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
**** Hl-todo
#+BEGIN_SRC emacs-lisp
       (use-package hl-todo
         :config
         (global-hl-todo-mode t))
#+END_SRC
**** Git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode t)
    (setq git-gutter:window-width 2
          git-gutter:update-interval 1
          git-gutter:ask-p nil))

  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :after git-gutter
    :demand fringe-helper
    :config
    ;; subtle diff indicators in the fringe
    ;; places the git gutter outside the margins.
    (setq-default fringes-outside-margins t)
    ;; thin fringe bitmaps
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248]
      nil nil 'center))
#+END_SRC
**** Centaur-tabs
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :bind
    (:map evil-normal-state-map
               ("g t" . centaur-tabs-forward)
               ("g T" . centaur-tabs-backward))
    ;; (centaur-tabs-headline-match)
    :init
    (setq centaur-tabs-set-icons t
          centaur-tabs-style "bar"
          centaur-tabs-gray-out-icons 'buffer
          centaur-tabs-set-close-button nil
          centaur-tabs-set-bar 'under
          x-underline-at-descent-line t
          centaur-tabs-cycle-scope 'tabs)
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-group-by-projectile-project))
#+END_SRC
**** Focus
I should look into integrating it with lsp-mode via (add-to-list 'focus-mode-to-thing '(c-mode . lsp-folding-range)), but that should only be done when enabling lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package focus
    :bind ("C-c f" . focus-mode)
    :config
    (add-to-list 'focus-mode-to-thing '(python-mode . lsp-folding-range)))
#+END_SRC
**** Darkroom
#+BEGIN_SRC emacs-lisp
  (use-package darkroom
    ;; :hook (prog-mode . darkroom-tentative-mode)
    :custom
    (darkroom-text-scale-increase 0.5))
#+END_SRC
**** TODO Olivetti
*** Ws-butler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :config
    (ws-butler-global-mode t))
#+END_SRC
*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-startup-banner 3)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC
*** Smart-tabs
I've fallen into the heresy.
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :hook (c-mode . (lambda ()
                      (setq intent-tabs-mode t)))
    :hook (c++-mode . (lambda ()
                      (setq intent-tabs-mode t)))
    :config
    (smart-tabs-insinuate 'c 'c++ 'javascript))
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (setq smartparens-global-mode t)
    (require 'smartparens-config))
#+END_SRC
*** Eshell
#+BEGIN_SRC emacs-lisp
  (defun shortened-path (path max-len)
    "Return a modified version of `path', replacing some components
        with single characters starting from the left to try and get
        the path down to `max-len'"
    (let* ((components (split-string (abbreviate-file-name path) "/"))
           (len (+ (1- (length components))
                   (reduce '+ components :key 'length)))
           (str ""))
      (while (and (> len max-len)
                  (cdr components))
        (setq str (concat str (if (= 0 (length (car components)))
                                  "/"
                                (string (elt (car components) 0) ?/)))
              len (- len (1- (length (car components))))
              components (cdr components)))
      (concat str (reduce (lambda (a b) (concat a "/" b)) components))))

  (setq eshell-prompt-function
        (lambda nil
          (concat (shortened-path (eshell/pwd) 20)
                  (if (= (user-uid) 0)
                      " # " " λ "))))

  (setq eshell-prompt-regexp "[^ ]?* λ ")

  (defun eshell-clear-buffer ()
    "Clear terminal"
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
  (add-hook 'eshell-mode-hook
            '(lambda()
               (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

  (use-package eshell-toggle
    :custom
    (eshell-toggle-size-fraction 5))
#+END_SRC
*** Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :config
    (setq elfeed-feeds
          '("https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA"
            "https://www.youtube.com/feeds/videos.xml?channel_id=UCZAENaOaceQUMd84GDc26EA"
            "https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg"
            "https://lukesmith.xyz/rss.xml")))
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
      (use-package magit
        :config
        (global-set-key (kbd "C-c m") 'magit-status))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode t))
#+END_SRC
*** Ivy, Swiper and Counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode t)
    (counsel-mode t)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (setq ivy-display-style 'fancy)
    (setq ivy-format-function 'ivy-format-function-line))

  (use-package ivy-hydra)
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    ;; enable python for in-buffer evaluation
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))

    ;; all python code be safe
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (string= lang "python")))
    (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

    (setq org-directory "~/.org/")
    (setq org-default-notes-file (concat org-directory "notes.org"))
    (setq org-hide-leading-stars t)
    (setq org-startup-folded t)
    (setq org-startup-indented t)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (setq org-agenda-files (list org-default-notes-file)))

  ;; TODO: agenda, capture templates
  (setq org-capture-templates
        '(("t" "Tasks" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?\n%u\n" :prepend t)
          ("l" "Look later" entry (file+headline org-default-notes-file "Look later")
           "* TODO %?")
          ("s" "Skills" entry (file+headline org-default-notes-file "Skills")
           "* TODO %?")
          ("g" "Gifts" entry (file+headline org-default-notes-file "Gifts")
           "* TODO %?")
          ))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC
*** Iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit)
#+END_SRC
*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :hook (after-change-major-mode . (lambda () (modify-syntax-entry ?_ "w")))
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    :config
    (define-key evil-normal-state-map (kbd "C-u") (lambda()
                                                    (interactive)
                                                    (evil-scroll-up nil)))
    (define-key evil-normal-state-map (kbd "C-d") (lambda()
                                                    (interactive)
                                                    (evil-scroll-down nil)))
    (evil-mode t)
    (setq evil-split-window-below t
          evil-vsplit-window-right t))

  (use-package evil-numbers
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "C-c j") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c k") 'evil-numbers/dec-at-pt))

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode t))

  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode))

  (use-package evil-leader
    :after evil
    :config
    (setq evil-leader/in-all-states 1)
    ;; (global-unset-key "<SPC>")
    (evil-leader/set-leader "<SPC>")
    (global-evil-leader-mode)
    (evil-leader/set-key
      ; Windows
      "w h" 'evil-window-left
      "w j" 'evil-window-down
      "w k" 'evil-window-up
      "w l" 'evil-window-right
      "w o" 'delete-other-windows
      "v" 'evil-window-vsplit
      "h" 'evil-window-split
      "q" 'evil-quit

      ; Lsp
      "l l" 'lsp
      "l c" 'lsp-treemacs-call-hierarchy
      "l n" 'lsp-rename
      "l s" 'lsp-describe-thing-at-point
      "l f" 'lsp-format-buffer
      "l d" 'lsp-find-definition
      "l t" 'lsp-find-type-definition
      "l r" 'lsp-find-references
      "l i" 'lsp-find-implementation

      "x" 'counsel-M-x

      "m" 'magit-status

      ; Eshell
      "t" 'eshell-toggle
      "e" 'eshell

      ; Elfeed
      "f" 'elfeed

      ; Search
      "s" 'swiper-isearch
      "a" 'counsel-ag

      ; Moving
      "b" 'ivy-switch-buffer
      "o" 'counsel-find-file
      "<SPC>" 'counsel-projectile-find-file
      "j" 'counsel-file-jump
      "g" 'counsel-bookmark
      "p" 'counsel-projectile-switch-project
      "d" 'dired-sidebar-toggle-with-current-directory))

  (use-package evil-iedit-state)

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))

  (use-package evil-goggles
    :hook (evil-mode . evil-goggles-mode)
    :config
    (setq evil-goggles-duration 0.025))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
*** Key-chord
#+BEGIN_SRC emacs-lisp
      (use-package key-chord
        :config
        (key-chord-mode t)
        (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+END_SRC
*** Dired
**** Settings
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC
**** Dired-sidebar
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :config
    (add-to-list 'dired-sidebar-display-alist '(side . right)))
#+END_SRC
*** Terminal-here
#+BEGIN_SRC emacs-lisp
      (use-package terminal-here
        :config
        (setq terminal-here-terminal-command (list "st" "--"))
        (global-set-key (kbd "M-RET") #'terminal-here-launch))
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (advice-add 'company-complete-common :before (lambda () (setq my-company-point (point))))
    (advice-add 'company-complete-common :after (lambda ()
                                                  (when (equal my-company-point (point))
                                                    (yas-expand))))
    (setq company-idle-delay 0)
    (setq company-show-numbers t)
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around t)
    (define-key company-active-map (kbd "<tab>") 'company-select-next)
    (define-key company-active-map (kbd "<return>") 'company-complete)
    :hook (prog-mode . company-mode))
#+END_SRC
*** TabNine
#+BEGIN_SRC emacs-lisp
  (use-package company-tabnine
    :config
    (add-to-list 'company-backends #'company-tabnine))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :config
        (yas-global-mode t))

      (use-package yasnippet-snippets)
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode)
    :config
    (setq flycheck-indication-mode 'right-fringe)
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [16 48 112 240 112 48 16] nil nil 'center)
    :bind (("C-c C-e" . flycheck-next-error)))

  (use-package flycheck-pos-tip
    :config
    (setq flycheck-pos-tip-timeout 0)
    (flycheck-pos-tip-mode))

  (use-package flycheck-haskell
    :hook (haskell-mode . flycheck-haskell-setup))

  (use-package flycheck-kotlin)
#+END_SRC
*** TODO Dap
#+BEGIN_SRC emacs-lisp
  ;; (use-package dap-mode
  ;;   :config
  ;;   (setq dap-mode t
  ;;         dap-ui-mode t)
  ;;   (require 'dap-python))
#+END_SRC
*** Dumb Jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind
    (:map evil-normal-state-map
          ("g d" . dumb-jump-go))
    :config
    (setq dumb-jump-selector 'ivy))
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (python-mode . lsp)
    :hook (elm-mode . lsp)
    :config
    (setq lsp-semantic-highlighting t)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-prefer-capf t)
    (setq lsp-idle-delay 0.750)
    (setq lsp-ui-mode nil)
    :init
    (setq read-process-output-max (* 1024 1024)))

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)

  ;; (use-package lsp-ui
  ;;   :config
  ;;   (setq lsp-ui-doc-mode nil)
  ;;   (setq lsp-ui-sideline-show-diagnostics t
  ;;         lsp-ui-sideline-show-hover t))
#+END_SRC
*** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :bind ("C-c d" . docker))
#+END_SRC
*** Languages
**** C++
#+BEGIN_SRC emacs-lisp
  (use-package ccls)
#+END_SRC
# ***** Irony
# #+BEGIN_SRC emacs-lisp
#         ;; (use-package irony
#         ;;   :hook (c++-mode . irony-mode)
#         ;;   :hook (c-mode . irony-mode)
#         ;;   :hook (irony-mode . irony-cdb-autosetup-compile-options))

#         ;; (use-package company-irony
#         ;;   :after irony-mode
#         ;;   :after company
#         ;;   :config
#         ;;   (add-to-list 'company-backends 'company-irony))

#         ;; (use-package flycheck-irony
#         ;;   :after irony-mode
#         ;;   :after flycheck
#         ;;   :hook (flycheck-mode . flycheck-irony-setup))
# #+END_SRC
**** Haskell
***** Hindent
#+BEGIN_SRC emacs-lisp
  (use-package hindent
    :config
    (setq hindent-reformat-buffer-on-save t))
#+END_SRC
***** Haskell-mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :hook (haskell-mode . haskell-indentation-mode)
    :hook (haskell-mode . interactive-haskell-mode)
    :hook (haskell-mode . hindent-mode)
    ;; :hook (haskell-mode . haskell-decl-scan-mode)
    ;; :hook (haskell-mode . haskell-doc-mode)
    :bind (:map haskell-mode-map ("C-c C-c" . haskell-process-load-file))
    :config
    (flymake-mode 0)
    (setq haskell-compile-cabal-build-command "stack build"))
#+END_SRC
***** Shakespeare-mode
#+BEGIN_SRC emacs-lisp
        (use-package shakespeare-mode)
#+END_SRC
***** Hlint-refactor
#+BEGIN_SRC emacs-lisp
  (use-package hlint-refactor
    :hook (haskell-mode . hlint-refactor-mode))
#+END_SRC
***** Lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-haskell
    :config
    (setq lsp-haskell-process-path-hie "hie-wrapper"))
#+END_SRC
**** Python
***** Jupyter
#+BEGIN_SRC emacs-lisp
  ;; (use-package ein
  ;;   :config
  ;;   (setq ein:output-area-inlined-images t))
#+END_SRC
***** Jedi
#+BEGIN_SRC emacs-lisp
  ;; (use-package company-jedi
  ;;   :hook (python-mode . (lambda () (add-to-list 'company-backends 'company-jedi))))
#+END_SRC
***** TODO Elpy
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :init
  ;;   (elpy-enable)
  ;;   (setq elpy-rpc-backend "jedi")
  ;;   :config
  ;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))
#+END_SRC
***** Yapfify
#+BEGIN_SRC emacs-lisp
        (use-package yapfify
          ; :defer t
          :hook (python-mode . yapf-mode))
#+END_SRC
***** Pyvenv
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv)
    ; :defer t)

  ;; (use-package auto-virtualenv
  ;;   :hook (python-mode . auto-virtualenv-mode))
#+END_SRC
**** JavaScript
***** Rjsx-mode
#+BEGIN_SRC emacs-lisp
        (use-package rjsx-mode
          ; :defer t
          :mode "\\.jsx?$")
#+END_SRC
***** Prettier-js
#+BEGIN_SRC emacs-lisp
        (use-package prettier-js
          ; :defer t
          :hook (js-mode . prettier-js-mode)
          :hook (rjsx-mode . prettier-js-mode))
#+END_SRC
***** TODO Tide
**** TypeScript
#+BEGIN_SRC emacs-lisp
       (use-package typescript-mode)
         ; :defer t)
#+END_SRC
**** PureScript
#+BEGIN_SRC emacs-lisp
       (use-package purescript-mode
         ; :defer t
         :hook (purescript-mode . purescript-indentation-mode))
#+END_SRC
**** Hy
#+BEGIN_SRC emacs-lisp
  (use-package hy-mode)
#+END_SRC
**** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode)

  (use-package cider)
#+END_SRC
**** Racket
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode)
#+END_SRC
**** Elm
#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :after company
    :hook (elm-mode . elm-format-on-save-mode))
    ;; (add-to-list 'company-backends 'company-elm))

  (use-package flycheck-elm
    :after (flycheck)
    :hook (flycheck-mode . flycheck-elm-setup))
#+END_SRC
**** Scala
#+BEGIN_SRC emacs-lisp
       (use-package scala-mode
         ; :defer t
         :interpreter
         ("scala" . scala-mode))
#+END_SRC
**** Kotlin
#+BEGIN_SRC emacs-lisp
       (use-package kotlin-mode)
         ; :defer t)
#+END_SRC
**** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :config
    (setq rust-format-on-save t)
    (define-key rust-mode-map (kbd "C-c C-c") 'rust-run))

  (use-package flycheck-rust
    :after flycheck
    :after rust-mode
    :hook (flycheck-mode . flycheck-rust-setup))
#+END_SRC
**** C#
#+BEGIN_SRC emacs-lisp
       (use-package csharp-mode)
         ; :defer t)
#+END_SRC
**** Cmake
#+BEGIN_SRC emacs-lisp
       (use-package cmake-mode)
         ; :defer t)
#+END_SRC
**** Jinja2
#+BEGIN_SRC emacs-lisp
       (use-package jinja2-mode)
         ; :defer t)
#+END_SRC
**** Markdown
#+BEGIN_SRC emacs-lisp
       (use-package markdown-mode)
         ; :defer t)
#+END_SRC
**** Mermaid
#+BEGIN_SRC emacs-lisp
       (use-package mermaid-mode)
         ; :defer t)
#+END_SRC
**** PlantUML
#+BEGIN_SRC emacs-lisp
       (use-package plantuml-mode
         ; :defer t
         :config
         (add-to-list
          'org-src-lang-modes '("plantuml" . plantuml))
         (setq plantuml-executable-path "/bin/plantuml")
         (setq plantuml-default-exec-mode 'executable))
#+END_SRC
**** Yaml
#+BEGIN_SRC emacs-lisp
       (use-package yaml-mode)
         ; :defer t)
#+END_SRC
**** BNF
#+BEGIN_SRC emacs-lisp
       (use-package bnf-mode)
         ; :defer t)
#+END_SRC
**** Dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
**** HTML
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :hook (jinja2-mode . emmet-mode))
#+END_SRC
**** LaTeX
#+BEGIN_SRC emacs-lisp
       (use-package tex
         :ensure auctex
         ; :defer t
         :bind ("M-q" . align-current)
         :hook (LaTeX-mode . LaTeX-math-mode)
         :hook (LaTeX-mode . flyspell-mode)
         :hook (LaTeX-mode . turn-on-reftex)
         :config
         (flycheck-mode 0)
         (setq TeX-PDF-mode t)
         (setq TeX-auto-save t)
         (setq TeX-parse-self t)
         (setq reftex-plug-into-AUCTeX t))
#+END_SRC
**** Ledger
#+BEGIN_SRC emacs-lisp
       (use-package ledger-mode)
         ; :defer t)
#+END_SRC
*** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
*** Auto-package-update
#+BEGIN_SRC emacs-lisp
      (use-package auto-package-update
        :config
        (setq auto-package-update-delete-old-versions t)
        (setq auto-package-update-hide-results t)
        (auto-package-update-maybe))
#+END_SRC
*** Cross-packages
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after (ivy projectile)
    :config
    (counsel-projectile-mode t))

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package evil-magit
    :after (evil magit)
    :config
    (setq evil-magit-want-vertical-movement t))

  ;; (use-package evil-smartparens
  ;;   :after (evil)
  ;;   :after (smartparens)
  ;;   :config
  ;;   (add-hook 'smartparens-enabled-hook 'evil-smartparens-mode))
#+END_SRC
